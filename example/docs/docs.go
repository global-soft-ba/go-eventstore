// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/{tenantID}/events": {
            "get": {
                "description": "Get all aggregate events (historical events and future patches) with optional search, sorting and pagination. The search is case-insensitive and has filter support via \"@ColumnName:X\". If no column is specified, all possible search fields are searched. Sorting for multiple columns via \"+ColumnName,-ColumnName2\" with +/- prefix to specify ascending/descending sort direction. The size parameter specifies the maximum number of entries that will be returned. With the values and direction parameters the start value of the page can be defined to achieve pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get aggregate events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-03T00:00:00Z\"",
                        "description": "Time (RFC3339)",
                        "name": "time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "@AggregateType:Item",
                        "description": "Search Term - supported columns are: EventID/SearchAggregateEventID, AggregateType/SearchAggregateType, AggregateID/SearchAggregateID, Version/SearchAggregateVersion, EventType/SearchAggregateEventType, Class/SearchAggregateClass, ValidTime/SearchValidTime, TransactionTime/SearchTransactionTime, Data/SearchData",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "-ValidTime",
                        "description": "Sort Term - supported columns are: AggregateType/SortAggregateType, AggregateID/SortAggregateID, Version/SortAggregateVersion, EventType/SortAggregateEventType, Class/SortAggregateClass, ValidTime/SortValidTime, TransactionTime/SortTransactionTime",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Page Size - maximum 1000",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Values of first row on page (only for pagination)",
                        "name": "values",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "IsBackward (only for pagination)",
                        "name": "direction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Found Events",
                        "schema": {
                            "$ref": "#/definitions/rest.EventStreamResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/events/{aggregateType}/{aggregateID}/{eventID}": {
            "delete": {
                "description": "Delete scheduled event of an aggregate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Delete scheduled event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Item\"",
                        "description": "Aggregate Type",
                        "name": "aggregateType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Aggregate ID",
                        "name": "aggregateID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/items": {
            "get": {
                "description": "Get all Items with optional search, sorting, and pagination. The search is case-insensitive and has filter support via \"@ColumnName:X\". If no column is specified, all possible search fields are searched. Sorting for multiple columns via \"+ColumnName,-ColumnName2\" with +/- prefix to specify ascending/descending sort direction. The size parameter specifies the maximum number of entries that will be returned. With the values and direction parameters the start value of the page can be defined to achieve pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Get Items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "@ItemName:Item 1",
                        "description": "Search Term - supported columns are: ItemID, ItemName",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "-ItemName",
                        "description": "Sort Term - supported columns are: ID, ItemID, ItemName",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Page Size - maximum 1000",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Values of first row on page (only for pagination)",
                        "name": "values",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "IsBackward (only for pagination)",
                        "name": "direction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Found Items",
                        "schema": {
                            "$ref": "#/definitions/rest.ItemOverviewResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new item for a specific tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Create a new item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item Data",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/item.CreateDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/items/{itemID}": {
            "get": {
                "description": "Get a specific item by its ID for a specific tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Get item by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Found Item",
                        "schema": {
                            "$ref": "#/definitions/example_core_port_service_item.DTO"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific item by its ID for a specific tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Delete an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/items/{itemID}/rename": {
            "patch": {
                "description": "Rename a specific item by its ID for a specific tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Item"
                ],
                "summary": "Rename an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "itemID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "2000-01-01T00:00:00Z",
                        "description": "Valid Time",
                        "name": "validTime",
                        "in": "query"
                    },
                    {
                        "description": "Rename Data",
                        "name": "renameDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/item.RenameDTO"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/projections": {
            "get": {
                "description": "Get the states of projections for a specific tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projection"
                ],
                "summary": "Get projection states",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "item"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Projection IDs",
                        "name": "projections",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/projection.StateResponseDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/projections/rebuild": {
            "post": {
                "description": "Rebuild specified projections for a tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projection"
                ],
                "summary": "Rebuild projections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "item"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Projections",
                        "name": "projections",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/projections/start": {
            "post": {
                "description": "Start specified projections for a tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projection"
                ],
                "summary": "Start projections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "item"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Projections",
                        "name": "projections",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/projections/stop": {
            "post": {
                "description": "Stop specified projections for a tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projection"
                ],
                "summary": "Stop projections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "item"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Projections",
                        "name": "projections",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/projections/{projectionID}": {
            "delete": {
                "description": "Delete a projection by its ID for a specific tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projection"
                ],
                "summary": "Delete a projection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"item\"",
                        "description": "Projection ID",
                        "name": "projectionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/{tenantID}/seeders/items": {
            "post": {
                "description": "Seed a specific number of items for a tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seeder"
                ],
                "summary": "Seed items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "tenantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Number of items to seed",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "event.DTO": {
            "type": "object",
            "properties": {
                "aggregateID": {
                    "type": "string"
                },
                "aggregateType": {
                    "type": "string"
                },
                "editedBy": {
                    "type": "string"
                },
                "eventID": {
                    "type": "string"
                },
                "field": {
                    "type": "string"
                },
                "scheduledAt": {
                    "type": "string"
                },
                "validFrom": {
                    "type": "string"
                },
                "valueChange": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "example_core_port_service_item.DTO": {
            "type": "object",
            "properties": {
                "itemID": {
                    "type": "string"
                },
                "itemName": {
                    "type": "string"
                },
                "tenantID": {
                    "type": "string"
                }
            }
        },
        "item.CreateDTO": {
            "type": "object",
            "properties": {
                "itemID": {
                    "type": "string"
                },
                "itemName": {
                    "type": "string"
                }
            }
        },
        "item.RenameDTO": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "projection.StateResponseDTO": {
            "type": "object",
            "properties": {
                "executionTimeOut": {
                    "type": "string"
                },
                "finishingTimeOut": {
                    "type": "string"
                },
                "hPatchStrategy": {
                    "type": "string"
                },
                "inputQueueLength": {
                    "type": "integer"
                },
                "preparationTimeOut": {
                    "type": "string"
                },
                "projectionID": {
                    "type": "string"
                },
                "projectionType": {
                    "type": "string"
                },
                "rebuildExecutionTimeOut": {
                    "type": "string"
                },
                "retryDurations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string"
                },
                "tenantID": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.PageDTO": {
            "type": "object",
            "properties": {
                "backward": {
                    "type": "boolean"
                },
                "search": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "sort": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "rest.EventStreamResponse": {
            "type": "object",
            "properties": {
                "next": {
                    "$ref": "#/definitions/response.PageDTO"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/event.DTO"
                    }
                },
                "previous": {
                    "$ref": "#/definitions/response.PageDTO"
                },
                "validTime": {
                    "type": "string",
                    "example": "2024-01-03T00:00:00Z"
                }
            }
        },
        "rest.ItemOverviewResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example_core_port_service_item.DTO"
                    }
                },
                "next": {
                    "$ref": "#/definitions/response.PageDTO"
                },
                "previous": {
                    "$ref": "#/definitions/response.PageDTO"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
